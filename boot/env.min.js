!function(root){const hamlet=root.hamlet={};root.hamlet.isCookie=function(key){return"string"==typeof document.cookie&&-1!==document.cookie.indexOf(key+"=")},hamlet.isUndefined=function(key){return void 0===this[key]}.bind(root),hamlet.isUndefined("boot")&&(root.boot={});const boot=root.boot;if(hamlet.isUndefined("cacheTime")||(boot.cacheTime=cacheTime),boot.dev=hamlet.isCookie("env"),boot.local=hamlet.isCookie("local"),boot.cacheTime=boot.cacheTime||"2",boot.host=boot.host||"",boot.cdn=boot.cdn||"/",boot.relative=boot.relative||"",boot.bundle=boot.bundle||"",boot.configuration=boot.configuration||{},boot.suffix=boot.dev?"":".min",boot.dashSuffix=boot.dev?"":"-min",boot.directory=boot.dev?"":"min/",boot.merge=function(destination,source){if(null===destination||null===source)return destination;for(let key in source)if(source.hasOwnProperty(key))if(Array.isArray(destination[key])){if(!Array.isArray(source[key])){console.warn("boot:",key,"is not an array in all configurations.");continue}destination[key]=destination[key].concat(source[key])}else"object"==typeof destination[key]&&destination[key]?destination[key]=boot.merge(destination[key],source[key]):destination[key]=source[key];return destination},boot.config=function(configuration,options){return"object"==typeof configuration&&boot.merge(boot.configuration,configuration.paths?configuration:{paths:configuration})},!hamlet.isUndefined("config")){let localConfig="function"==typeof config?config(boot):config;"object"==typeof localConfig&&localConfig&&boot.config(localConfig)}}(this);